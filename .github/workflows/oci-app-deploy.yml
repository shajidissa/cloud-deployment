name: "OCI: App Deploy (to VM)"

on:
  workflow_dispatch:
    inputs:
      tag_latest:
        description: "Also tag image as latest?"
        type: boolean
        default: true

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker build -t "$IMAGE" ./app
          docker push "$IMAGE"
          if [ "${{ inputs.tag_latest }}" = "true" ]; then
            docker tag "$IMAGE" ghcr.io/${{ github.repository }}:latest
            docker push ghcr.io/${{ github.repository }}:latest
          fi
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.OCI_VM_SSH_KEY }}

      - name: Configure SSH known_hosts
        run: |
          mkdir -p ~/.ssh
          printf "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Update VM and restart app
        env:
          VM: ${{ secrets.OCI_VM_USER }}@${{ secrets.OCI_VM_HOST }}
          IMAGE_REPO: ghcr.io/${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          ssh "$VM" bash -lc '
            set -e
            cd /opt/app
            touch .env
            # image repo/tag
            if grep -q "^APP_IMAGE_REPO=" .env; then sed -i "s#^APP_IMAGE_REPO=.*#APP_IMAGE_REPO='"$IMAGE_REPO"'#g" .env; else echo "APP_IMAGE_REPO='"$IMAGE_REPO"'" >> .env; fi
            if grep -q "^APP_TAG=" .env; then sed -i "s#^APP_TAG=.*#APP_TAG='"$IMAGE_TAG"'#g" .env; else echo "APP_TAG='"$IMAGE_TAG"'" >> .env; fi
            # db settings
            if grep -q "^DB_HOST=" .env; then sed -i "s#^DB_HOST=.*#DB_HOST='"$DB_HOST"'#g" .env; else echo "DB_HOST='"$DB_HOST"'" >> .env; fi
            if grep -q "^DB_USER=" .env; then sed -i "s#^DB_USER=.*#DB_USER='"$DB_USER"'#g" .env; else echo "DB_USER='"$DB_USER"'" >> .env; fi
            if grep -q "^DB_PASSWORD=" .env; then sed -i "s#^DB_PASSWORD=.*#DB_PASSWORD='"$DB_PASSWORD"'#g" .env; else echo "DB_PASSWORD='"$DB_PASSWORD"'" >> .env; fi
            # roll the container
            docker compose pull app || true
            docker compose up -d
            sleep 5
            bash /opt/app/healthcheck.sh || (docker logs node-app; false)
          '