name: "OCI: App Deploy (to VM)"
on:
  workflow_dispatch:
    inputs:
      tag_latest:
        description: "Also tag image as latest?"
        type: boolean
        default: true
permissions: { contents: read, packages: write, id-token: write }
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push image
        id: img
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker build -t "$IMAGE" ./app || docker build -t "$IMAGE" .
          docker push "$IMAGE"
          if [ "${{ inputs.tag_latest }}" = "true" ]; then
            docker tag "$IMAGE" ghcr.io/${{ github.repository }}:latest
            docker push ghcr.io/${{ github.repository }}:latest
          fi
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
      - name: Find latest apply job
        id: job
        uses: oracle-actions/run-oci-cli-command@v1
        env:
          OCI_CLI_USER:        ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY:     ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_REGION:      ${{ secrets.OCI_CLI_REGION }}
        with:
          command: >
            resource-manager job list
            --stack-id ${{ secrets.OCI_STACK_OCID }}
            --all
            --query "data[?"operation"=='APPLY' && "lifecycle-state"=='SUCCEEDED']|[0].id"
            --raw-output
      - name: Read DB host/user outputs
        id: db
        uses: oracle-actions/run-oci-cli-command@v1
        with:
          command: >
            resource-manager job-output-summary list-job-outputs
            --job-id ${{ steps.job.outputs.raw_output }}
            --query "{db_host: data[?name=='db_host']|[0].value, db_user: data[?name=='db_user']|[0].value, public_ip: data[?name=='public_ip']|[0].value}"
            --raw-output
      - uses: webfactory/ssh-agent@v0.9.0
        with: { ssh-private-key: ${{ secrets.OCI_VM_SSH_KEY }} }
      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          echo -e "Host *
	StrictHostKeyChecking no
" > ~/.ssh/config
      - name: Remote update & restart
        env:
          VM: ${{ secrets.OCI_VM_USER }}@${{ secrets.OCI_VM_HOST }}
          IMAGE_REPO: ghcr.io/${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_INFO: ${{ steps.db.outputs.raw_output }}
        run: |
          DB_HOST=$(echo "$DB_INFO" | jq -r '.db_host')
          DB_USER=$(echo "$DB_INFO" | jq -r '.db_user')
          ssh "$VM" <<'EOF'
          set -e
          cd /opt/app
          touch .env
          sed -i "s#^APP_IMAGE_REPO=.*#APP_IMAGE_REPO=${IMAGE_REPO}#g" .env || echo "APP_IMAGE_REPO=${IMAGE_REPO}" >> .env
          if grep -q '^APP_TAG=' .env; then sed -i "s#^APP_TAG=.*#APP_TAG=${IMAGE_TAG}#g" .env; else echo "APP_TAG=${IMAGE_TAG}" >> .env; fi
          if grep -q '^DB_PASSWORD=' .env; then sed -i "s#^DB_PASSWORD=.*#DB_PASSWORD=${DB_PASSWORD}#g" .env; else echo "DB_PASSWORD=${DB_PASSWORD}" >> .env; fi
          if grep -q '^DB_HOST=' .env; then sed -i "s#^DB_HOST=.*#DB_HOST=${DB_HOST}#g" .env; else echo "DB_HOST=${DB_HOST}" >> .env; fi
          if grep -q '^DB_USER=' .env; then sed -i "s#^DB_USER=.*#DB_USER=${DB_USER}#g" .env; else echo "DB_USER=${DB_USER}" >> .env; fi
          docker compose pull app || true
          docker compose up -d
          sleep 5
          bash /opt/app/healthcheck.sh || (docker logs node-app; false)
          EOF
